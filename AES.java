import java.io.*;


public class AES {

	public static int[][] cryptMatrix = new int [4][4]; 
	
	public static int [][] sBox = new int [] []{ 
		{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
		{0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
		{0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
		{0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
		{0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
		{0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
		{0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
		{0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
		{0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
		{0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
		{0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
		{0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
		{0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
		{0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
		{0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
		{0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}
	};
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//java AES option keyFile inputFile
		BufferedReader in;
		try {
			in = new BufferedReader(new FileReader(args[2]));
			String line = in.readLine();
			while (line !=null)
			{	
				
				int col = 0;
				int row = 0;
				for (int i = 0; line != null && i<line.length(); i=i +2)
				{
					if (col == 4)
					{
						col = 0;
						row++;
					}
					int hex = Integer.decode("0x"+line.substring(i,i+2));
					
					cryptMatrix[row][col] = hex;
					col++;
				}
				line = in.readLine();
				
			}
			printMatrix();
			subBytes();
			printMatrix();
			shiftRows();
			printMatrix();
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		//Find out which option is given
		String option = args[0];
		if (option.equals("e"))
		{
			
		}
		else if (option.equals("d"))
		{
			
		}
		else
		{
			System.out.println("Invalid input.");
			System.exit(1);
		}
		
		//Read in keyFile
		//Convert to Binary
		//Encrypt
		//Store as hex string to output file
		
		
	}

	//print matrix
	//used for debugging purposes
	public static void printMatrix () {
		for (int i = 0; i<cryptMatrix.length; i++)
		{
			for (int j =0; j<cryptMatrix[i].length; j++)
			{
				System.out.print(cryptMatrix[i][j] + " ");
			}
			System.out.println();
		}
	}
	//subBytes
	public static void subBytes(){
		int row = 0;
		int col = 0;
		int firstdigit = 0;
		int lastdigit = 0;
		int parameter = 0;
		while (parameter < (cryptMatrix.length*cryptMatrix[0].length))
		{
			if (col == 4)
			{
				col = 0;
				row++;
			}
			firstdigit = (cryptMatrix[row][col]>>4)&0xF;
			lastdigit = cryptMatrix[row][col]&0xF;
			//System.out.println(firstdigit +"\t"+ lastdigit+ "\t\t"+ sBox[firstdigit][lastdigit]);
			cryptMatrix[row][col] = sBox[firstdigit][lastdigit];
			col++;
			parameter++;
		}
	}
	
	//shiftRows
	public static void shiftRows(){
		
		//temporary variables with number indicating original column
		int temp1=0;
		int temp2=0;
		int temp3=0;
		int temp4=0;
		
		//first row stays the same
		//second row: 2nd to 1st, 3rd to 2nd, 4th to 3rd, 1st goes to 4th
		temp1=cryptMatrix[1][0];
		temp2=cryptMatrix[1][1];
		temp3=cryptMatrix[1][2];
		temp4=cryptMatrix[1][3];
		cryptMatrix[1][0]= temp2;
		cryptMatrix[1][1]= temp3;
		cryptMatrix[1][2]= temp4;
		cryptMatrix[1][3]= temp1;
		
		
		//third row: 3rd to 1st, 4th to 2nd, 1st to 3rd, 2nd to 4th
		temp1=cryptMatrix[2][0];
		temp2=cryptMatrix[2][1];
		temp3=cryptMatrix[2][2];
		temp4=cryptMatrix[2][3];
		cryptMatrix[2][0]= temp3;
		cryptMatrix[2][1]= temp4;
		cryptMatrix[2][2]= temp1;
		cryptMatrix[2][3]= temp2;
		
		
		//fourth row: 4th to 1st, 1st to 2nd, 2nd to 3rd, 3rd to 4th
		temp1=cryptMatrix[3][0];
		temp2=cryptMatrix[3][1];
		temp3=cryptMatrix[3][2];
		temp4=cryptMatrix[3][3];
		cryptMatrix[3][0]= temp4;
		cryptMatrix[3][1]= temp1;
		cryptMatrix[3][2]= temp2;
		cryptMatrix[3][3]= temp3;
		
	}
	
	//mixColumns
	
	//addRoundKey
	
}
